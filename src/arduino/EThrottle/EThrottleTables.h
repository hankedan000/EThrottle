//============================================================
// this file was autogenerated by gen-ms-tables.py
// source file: EThrottleTables.csv
// date/time: 2023/11/23 09:01:51
//============================================================
#pragma once

#include <EEPROM.h>
#include <MegaCAN_ExtDevice.h>
#include <stdint.h>

#define TABLE_SIZE_OUT_PC    128
#define TABLE_SIZE_CFG_PAGE1 128
#define TABLE_SIZE_CFG_PAGE2 128
#define TABLE_FLASH_OFFSET_CFG_PAGE1 0  
#define TABLE_FLASH_OFFSET_CFG_PAGE2 128

// forward declarations
struct OutPC_T;
struct Page1_T;
struct Page2_T;

#define FIELD_OFFSET_OUT_PC(FIELD_NAME) (offsetof(OutPC_T, FIELD_NAME))
#define FIELD_OFFSET_CFG_PAGE1(FIELD_NAME) (TABLE_FLASH_OFFSET_CFG_PAGE1 + offsetof(Page1_T, FIELD_NAME))
#define FIELD_OFFSET_CFG_PAGE2(FIELD_NAME) (TABLE_FLASH_OFFSET_CFG_PAGE2 + offsetof(Page2_T, FIELD_NAME))

const uint8_t  deadValue                   = 0     ;
const uint16_t adcMin                      = 0     ;
const uint16_t adcMax                      = 1023  ;
const uint8_t  minU08                      = 0     ;
const uint8_t  maxU08                      = 255   ;
const uint16_t minU16                      = 0     ;
const uint16_t maxU16                      = 65535 ;
const int16_t  minS16                      = -32768;
const int16_t  maxS16                      = 32767 ;
const uint8_t  SENSOR_COMPARE_CURVE_N_BINS = 4     ;

struct Status0Bits_T {
    // 1 if needs a flash page burned
    // range: [0.000000,1.000000]
    uint8_t needsBurn : 1;

    // 1 if unburned flash page was swapped out
    // range: [0.000000,1.000000]
    uint8_t flashDataLost : 1;

    // range: [0.000000,1.000000]
    uint8_t rsvd0 : 2;

    // current flash table loaded into RAM
    // range: [0.000000,15.000000]
    uint8_t currFlashTable : 4;
};

union Status0_T {
    // range: [0.000000,1.000000]
    Status0Bits_T bits;

    // range: [0.000000,1.000000]
    uint8_t value;
};

struct ADC_Status_T {
    // ADC scheduler index
    // range: [0.000000,15.000000]
    uint8_t schedIdx : 4;

    // range: [0.000000,15.000000]
    // units: Stopped,Started,PendingTrigger,Complete
    uint8_t state : 2;

    // range: [0.000000,1.000000]
    uint8_t rsvd0 : 2;

    // ADC conversion cycles counter (wraps)
    // range: [0.000000,255.000000]
    uint8_t convCycles : 8;

    // range: [0.000000,255.000000]
    uint8_t adcsra : 8;
};

struct ThrottleStatus_T {
    // 1 if autotune is inprogress, 0 otherwise
    // range: [0.000000,1.000000]
    uint8_t pidAutoTuneBusy : 1;

    // range: [0.000000,1.000000]
    uint8_t ppsComparisonFault : 1;

    // range: [0.000000,1.000000]
    uint8_t tpsComparisonFault : 1;

    // range: [0.000000,1.000000]
    uint8_t throttleEnabled : 1;

    // range: [0.000000,1.000000]
    uint8_t motorEnabled : 1;

    // 1 if motor driver detected overcurrent or over temp condition, 0 otherwise
    // range: [0.000000,1.000000]
    uint8_t motorDriverFault : 1;

    // 1 if ADC conversions have stopped, 0 otherwise
    // range: [0.000000,1.000000]
    uint8_t adcStalled : 1;

    // range: [0.000000,1.000000]
    uint8_t rsvd0 : 1;
};

struct ThrottleControlBits {
    // 0 to enable throttle control, 1 to disable throttle control
    // range: [0.000000,1.000000]
    // units: Throttle Control ON,Throttle Control OFF
    uint8_t throttleInhibit : 1;

    // range: [0.000000,1.000000]
    uint8_t rsvd0 : 7;
};

union ThrottleControl {
    // range: [0.000000,1.000000]
    ThrottleControlBits bits;

    // range: [0.000000,1.000000]
    uint8_t word;
};

struct ThrottleOutVars_T {
    // tpsA ADC value (raw)
    // range: [0.000000,1023.000000]
    // units: ADC
    uint16_t tpsA;

    // tpsB ADC value (raw)
    // range: [0.000000,1023.000000]
    // units: ADC
    uint16_t tpsB;

    // finalized throttle position based on both A & B sensor readings
    // scale: 0.010000; translate: 0.000000
    // range: [0.000000,100.000000]
    // units: %
    int16_t tps;

    // ppsA ADC value (raw)
    // range: [0.000000,1023.000000]
    // units: ADC
    uint16_t ppsA;

    // ppsB ADC value (raw)
    // range: [0.000000,1023.000000]
    // units: ADC
    uint16_t ppsB;

    // finalized pedal position based on both A & B sensor readings
    // scale: 0.010000; translate: 0.000000
    // range: [0.000000,100.000000]
    // units: %
    int16_t pps;

    // PID's target tps value
    // scale: 0.010000; translate: 0.000000
    // range: [0.000000,100.000000]
    // units: %
    int16_t tpsTarget;

    // motor driver PWM output + dir
    // range: [-255.000000,255.000000]
    // units: PWM
    int16_t motorOut;

    // motor current
    // range: [0.000000,3000.000000]
    // units: mA
    uint16_t motorCurrent_mA;

    // status register for throttle PID
    // range: [0.000000,1.000000]
    ThrottleStatus_T status;

    // delta in the redundant PPS sensor comparison
    // range: [-1023.000000,1023.000000]
    // units: ADC
    int16_t ppsSafetyDelta;

    // delta in the redundant TPS sensor comparison
    // range: [-1023.000000,1023.000000]
    // units: ADC
    int16_t tpsSafetyDelta;

    // portion of tps target from idle control
    // scale: 0.010000; translate: 0.000000
    // range: [0.000000,100.000000]
    // units: %
    int16_t idleAdder;

    // portion of tps target from pedal position
    // scale: 0.010000; translate: 0.000000
    // range: [0.000000,100.000000]
    // units: %
    int16_t ppsAdder;

    // motor driver current feedback ADC value (raw)
    // range: [0.000000,1023.000000]
    // units: ADC
    uint16_t driverFB;

    // PPS comparison fault counter (wraps)
    // range: [0.000000,255.000000]
    uint8_t ppsCompFaultCount;

    // TPS comparison fault counter (wraps)
    // range: [0.000000,255.000000]
    uint8_t tpsCompFaultCount;
};

struct RangeCalibration {
    // range: [0.000000,1023.000000]
    // units: ADC
    uint16_t min;

    // range: [0.000000,1023.000000]
    // units: ADC
    uint16_t max;
};

struct SensorSetup {
    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t comparePPS : 1;

    // range: [0.000000,1.000000]
    // units: PPS B, PPS A
    uint8_t preferPPS_A : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t compareTPS : 1;

    // range: [0.000000,1.000000]
    // units: TPS B, TPS A
    uint8_t preferTPS_A : 1;

    // range: [0.000000,1.000000]
    uint8_t rsvd : 4;
};

union SensorSetupUnion {
    // range: [0.000000,1.000000]
    SensorSetup bits;

    // range: [0.000000,1.000000]
    uint8_t word;
};

struct RT_BroadcastControlBits {
    // set to 1 to enable real-time data broadcasting
    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t enabled : 1;

    // range: [0.000000,1.000000]
    uint8_t rsvd0 : 3;

    // range: [0.000000,1.000000]
    // units: 1Hz,2Hz,5Hz,10Hz,25Hz,50Hz,INVALID,INVALID
    uint8_t rate : 3;

    // range: [0.000000,1.000000]
    uint8_t rsvd1 : 1;
};

union RT_BroadcastControl {
    // range: [0.000000,1.000000]
    RT_BroadcastControlBits bits;

    // range: [0.000000,1.000000]
    uint8_t word;
};

struct RT_BroadcastGroupEnables {
    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp00 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp01 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp02 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp03 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp04 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp05 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp06 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp07 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp08 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp09 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp10 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp11 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp12 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp13 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp14 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp15 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp16 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp17 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp18 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp19 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp20 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp21 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp22 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp23 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp24 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp25 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp26 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp27 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp28 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp29 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp30 : 1;

    // range: [0.000000,1.000000]
    // units: Disabled,Enabled
    uint8_t gp31 : 1;
};

struct RT_Broadcast {
    // range: [0.000000,1.000000]
    RT_BroadcastControl ctrl;

    // range: [0.000000,1.000000]
    uint16_t baseId;

    // range: [0.000000,1.000000]
    RT_BroadcastGroupEnables groupEnables;
};

struct MCUSR_Status_Bits {
    // power-on reset flag
    // range: [0.000000,1.000000]
    uint8_t porf : 1;

    // extern reset flag
    // range: [0.000000,1.000000]
    uint8_t extrf : 1;

    // brown-out reset flag
    // range: [0.000000,1.000000]
    uint8_t borf : 1;

    // watchdog reset flag
    // range: [0.000000,1.000000]
    uint8_t wdrf : 1;
};

union MCUSR_Status {
    // range: [0.000000,1.000000]
    MCUSR_Status_Bits bits;

    // range: [0.000000,1.000000]
    uint8_t word;
};

struct OutPC_T {
    // range: [0.000000,1.000000]
    uint8_t canStatus;

    // range: [0.000000,255.000000]
    uint8_t canErrorCount;

    // range: [0.000000,1500.000000]
    uint16_t loopTimeUs;

    // range: [0.000000,1.000000]
    Status0_T status0;

    // range: [0.000000,1.000000]
    MCUSR_Status mcusr;

    // range: [0.000000,1.000000]
    ThrottleOutVars_T tVars;

    // range: [0.000000,1.000000]
    ADC_Status_T adcStatus;

    // range: [0.000000,1.000000]
    uint8_t reserved[88];
};
static_assert(sizeof(OutPC_T) == 128);
static_assert(sizeof(OutPC_T) <= MEGA_CAN_EXT_MAX_FLASH_TABLE_SIZE);

struct Page1_T {
    // range: [0.000000,1.000000]
    ThrottleControl throttleCtrl;

    // scale: 0.010000; translate: 0.000000
    // range: [0.000000,1.000000]
    uint16_t throttleKp;

    // scale: 0.010000; translate: 0.000000
    // range: [0.000000,1.000000]
    uint16_t throttleKi;

    // scale: 0.010000; translate: 0.000000
    // range: [0.000000,1.000000]
    uint16_t throttleKd;

    // min/max ADC range calibration for Pedal Position Sensors (PPS)\n min is ADC at 0% throttle\n max is ADC at 100% throttle
    // range: [0.000000,1.000000]
    RangeCalibration ppsCalA;

    // min/max ADC range calibration for Pedal Position Sensors (PPS)\n min is ADC at 0% throttle\n max is ADC at 100% throttle
    // range: [0.000000,1.000000]
    RangeCalibration ppsCalB;

    // min/max ADC range calibration for Throttle Position Sensors (TPS)\n min is ADC at 0% throttle\n max is ADC at 100% throttle
    // range: [0.000000,1.000000]
    RangeCalibration tpsCalA;

    // min/max ADC range calibration for Throttle Position Sensors (TPS)\n min is ADC at 0% throttle\n max is ADC at 100% throttle
    // range: [0.000000,1.000000]
    RangeCalibration tpsCalB;

    // range: [0.000000,1.000000]
    SensorSetupUnion sensorSetup;

    // range: [0.000000,1023.000000]
    // units: ADC
    uint16_t ppsCompCurve_xBins[SENSOR_COMPARE_CURVE_N_BINS];

    // range: [0.000000,1023.000000]
    // units: ADC
    uint16_t ppsCompCurve_yBins[SENSOR_COMPARE_CURVE_N_BINS];

    // range: [0.000000,1023.000000]
    // units: ADC
    uint16_t tpsCompCurve_xBins[SENSOR_COMPARE_CURVE_N_BINS];

    // range: [0.000000,1023.000000]
    // units: ADC
    uint16_t tpsCompCurve_yBins[SENSOR_COMPARE_CURVE_N_BINS];

    // range: [0.000000,1023.000000]
    // units: ADC
    uint16_t ppsCompareThresh;

    // range: [0.000000,1023.000000]
    // units: ADC
    uint16_t tpsCompareThresh;

    // scale: 0.010000; translate: 0.000000
    // range: [0.000000,100.000000]
    // units: %
    uint16_t tpsStall;

    // range: [0.000000,2047.000000]
    uint16_t msqRtBcastBaseId;

    // range: [0.000000,1.000000]
    uint8_t reserved[64];
};
static_assert(sizeof(Page1_T) == 128);
static_assert(sizeof(Page1_T) <= MEGA_CAN_EXT_MAX_FLASH_TABLE_SIZE);

struct Page2_T {
    // range: [0.000000,1.000000]
    RT_Broadcast rtBcast;

    // range: [0.000000,1.000000]
    uint8_t reserved[121];
};
static_assert(sizeof(Page2_T) == 128);
static_assert(sizeof(Page2_T) <= MEGA_CAN_EXT_MAX_FLASH_TABLE_SIZE);

extern OutPC_T outPC;

enum TableId_E {
    eTI_OUT_PC = 0,
    eTI_CFG_PAGE1 = 1,
    eTI_CFG_PAGE2 = 2,
    eTI_UART_CMD = 3
};

#define NUM_TABLES 4
static const MegaCAN::TableDescriptor_t TABLES[NUM_TABLES] = {
    {&outPC           , sizeof(OutPC_T), MegaCAN::TableType_E::eRam  , -1                          },
    {MegaCAN::tempPage, sizeof(Page1_T), MegaCAN::TableType_E::eFlash, TABLE_FLASH_OFFSET_CFG_PAGE1},
    {MegaCAN::tempPage, sizeof(Page2_T), MegaCAN::TableType_E::eFlash, TABLE_FLASH_OFFSET_CFG_PAGE2},
    {nullptr          , 8              , MegaCAN::TableType_E::eRam  , -1                          },
};