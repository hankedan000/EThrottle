; INI date: 9:35am, Jun 01, 2017
;------------------------------------------------------------------------------
; Units - "unset" to change to metric units in TunerStudioMS (to match values returned
; from MShift/GPIO controller when metric units are chosen).
; defaults are imperial units
#unset CELSIUS
#unset SI_LENGTHS
; otherwise METRIC units are used

; unset CAM_COMMANDS if you want to interface to GPIO directly through serial
; otherwise, this will interface through CAN pass-through
#set CAN_COMMANDS

;----------------------------------------------------------------------------

[MegaTune]
   MTversion      = 2.25 ; MegaTune itself; needs to match exec version.

#if CAN_COMMANDS
   versionInfo    = "r\$tsCanId\x0e\x00\x00\x00\x3c"  ; Title bar, this is the code version.
   queryCommand   = "r\$tsCanId\x0f\x00\x00\x00\x14"  ; 20 bytes from table 15. Verify against signature.
#else
   versionInfo    = "S"  ; Put this in the title bar.
   queryCommand   = "Q"  ; Verify against signature.
#endif
   signature      = "EThrottle-0.1.0    " ; EThrottle sends a null at 20th byte.
                   ; 123456789.123456789.

#  set LOAD_KPA

;----------------------------------------------------------------------------


[ReferenceTables]

    tableWriteCommand   = "t" ;

    referenceTable = canOutmsgBurner, "Configure CAN Outmsg"
      ;topicHelp = "http://www.megamanual.com/mt29.htm#outmsg"
        tableIdentifier = 010, "outmsg Table"       ; id in octal, 010 = table 8
        adcCount  = 1024  ; length of the table
        bytesPerAdc   = 1   ; using bytes
        scale   = 1 ; scale before sending to controller
        ;tableGenerator = Generator Type,     Label, xUnits, yUnits,  xLow, xHi,  yLow, yHi ; lows and highs are just default values, they will be user editable
      ;tableGenerator = linearGenerator, "Custom Linear WB", "Volts","AFR",    1,   4,   9.7,  18.7
      solutionsLabel  = "CAN Outmsg"
      solution  = "CAN Outmsg",   { table(adcValue, "canOutmsg.inc") }

;-------------------------------------------------------------------------------

[Constants]

   ;----------------------------------------------------------------------------
   ; Constants Definition
   ; --------------------
   ;
   ; Scalar Values
   ; -------------
   ; The scaling and translation values are used as follows:
   ;    msValue   = userValue / scale - translate
   ;    userValue = (msValue + translate) * scale
   ;
   ;
   ; Array Values
   ; ------------
   ; Arrays are specified just like scalars, except that they have a "shape"
   ; entry in the fourth parameter.  The shape allows you to define lists or
   ; tables, for example [8] defines a list with eight values and [2x4] defines
   ; a table with eight values (two rows and four columns).  Tables may be
   ; stored in either "X-" or "Y-order."  X-order means that memory is laid
   ; out as follows.
   ;
   ;     [x1,y1] [x2,y1]...[xn,y1] [x1,y2]...
   ;
   ; Y-order would be
   ;
   ;     [x1,y1] [x1,y2]...[x1,yn] [x2,y1]...
   ;
   ; To use the TableEditor, you must define two lists and a table, and
   ; the lengths of the lists must correspond to the shape of the table.
   ;
   ; Bit Fields
   ; ----------
   ; Bits are numbered 0-7, the rightmost being bit zero.  The basic
   ; data word that stores bit fields must be unsigned.
   ;
   ; You need NOT supply the correct number of labels matching the
   ; number of bits you've specified (one bit requires 2 values, two
   ; bits requires 4 values and so on).  If you neglect to supply enough
   ; labels, they will be synthesized using the sequence "1", "2" and so
   ; on based upon their position in the sequence (the cltType and matType
   ; will end up with identical lists).
   ;
   ;----------------------------------------------------------------------------

   pageActivationDelay = 250 ; Milliseconds delay after burn command.
   blockReadTimeout    = 180 ; Milliseconds total timeout for reading page.



; MUST set nPages *before* blocking factor, or will get "turboBaud" error

   endianness          = big
   nPages              = 2
; page size must be divisible by 8 for TS CAN pass-through compatibility
   ; Note: these are lists of commands for each page defined
   ;                     | Page 1          | Page 2          | Page 3          |
   ;                     |-----------------|-----------------|-----------------|
   pageSize            =  128              ,128
   pageIdentifier      =  "\$tsCanId\x01"  ,"\$tsCanId\x02"
   burnCommand         =  "b\$tsCanId\x01" ,"b\$tsCanId\x02"
   pageReadCommand     =  "r%2i%2o%2c"     ,"r%2i%2o%2c"
   pageValueWrite      =  "w%2i%2o%2c%v"   ,"w%2i%2o%2c%v"
   pageChunkWrite      =  "w%2i%2o%2c%v"   ,"w%2i%2o%2c%v"

; The commands sent to the device are formatted "command\CAN_ID\table_ID\table offset\num.bytes"
; i.e. cmd\CAN_ID\Table_ID\Table_offset\Num_Bytes
; where:
; cmd => ascii 'r' (x72): Read and send back RAM user input parameters from offset location, others commands are:
;              'a' (x61): send back All real time ram output variables
;              'w' (x77): receive new ram input data and Write into offset location;
;              'e' (x65): same as 'w', but verify by Echoing back values, up to sizeof(txbuf).
;              'y' (x79): verify that a flash data block matches a corresponding ram data block
;              'b' (x62): Burn a block of ram input values into flash;
;              't' (x74): update a flash Table with following serial data
;              '!' (x21): start receiving reinit/reboot command
;              'c' (x63): send back seconds to test Comms
;              'Q' (x51): send code revision number
;              'S' (x53): send program title
;              'k' (x68): request checksum.
; CAN_ID is the controller's unique ID number (from 0 to 15) - 1 byte
; %2i is the id/table number - 1 byte
; %2o is the table offset - 2 bytes
; %2c is the number of bytes to be read/written - 2 bytes
; %v is the byte to be sent/written - 1 bytes
; so there are 7 bytes to a message

; Example: from TS comm log
; Time: 0:33.314: SENT, 7 bytes
; x72 x01 x07 x00 x38 x00 x08
; is in format ; or r%2i%2o%2c, and
; means:
; x72 => ascii 'r' (character 72): Read and send back RAM user input parameters from offset location,
; x01 => from controller using can_id=1,
; x07 => values in table=7 (outpc),
; x00 & x38 => at offset 38h (56 decimal) - need two bytes since we may require an offset greater than 255,
; x00 & x08 => read and send 8 bytes

;   C Type                 Bits            Range                    TunerStudio INI Designation
;   ------                 ----            -----                    ---------------------------

; - char (=signed char)     8              -128 to 127               S08 (one byte offset each)
; - unsigned char           8                 0 to 255               U08

; ...............................................................................................

; - int  (=signed int)     16          -32768 to 32767               S16 (two byte offset each)
;   (= short)

; - unsigned int           16               0 to 65535               U16
;   (=unsigned short int)

; ................................................................................................

; - long  (=signed long)   32          -2�� to 2�� - 1               S32 (four byte offset each)
;   (=long int)

; - unsigned long          32             0 to 2�� - 1               U32
;   (=unsigned long int)

; ................................................................................................

; Note that variables are signed unless designated otherwise.

; MUST set nPages *before* blocking factor, or will get "turboBaud" error
#if CAN_COMMANDS
   blockingFactor = 64
#endif

; For the most part, the parameters below have the same names as in the source code.
; This isn't required (since it is the actual memory addresses that are used),
; but it does help when trying to understand and discuss the source code.

  page = 1
  ; **************************************** inpram *************************************************************************************
  ;name                  = class,  type, offset,  shape,    units,       scale,      translate,     lo,       hi,            decimal digits
  adcMappingCurveA_xBins = array,  U16,  0,       [6],      "",          1.0,        0.0,           {adcMin}, {adcMax},      0
  adcMappingCurveA_yBins = array,  S16,  12,      [6],      "",          1.0,        0.0,           {minS16}, {maxS16},      0
  adcMappingCurveB_xBins = array,  U16,  24,      [6],      "",          1.0,        0.0,           {adcMin}, {adcMax},      0
  adcMappingCurveB_yBins = array,  S16,  36,      [6],      "",          1.0,        0.0,           {minS16}, {maxS16},      0
  adcMappingCurveC_xBins = array,  U16,  48,      [6],      "",          1.0,        0.0,           {adcMin}, {adcMax},      0
  adcMappingCurveC_yBins = array,  S16,  60,      [6],      "",          1.0,        0.0,           {minS16}, {maxS16},      0
  adcMappingCurveD_xBins = array,  U16,  72,      [6],      "",          1.0,        0.0,           {adcMin}, {adcMax},      0
  adcMappingCurveD_yBins = array,  S16,  84,      [6],      "",          1.0,        0.0,           {minS16}, {maxS16},      0
  adc0MappingCtrl        = scalar, U08,  96,                "bits",      1,          0,             {minU08}, {maxU08},      0
  adc0MappingCtrl_enable = bits,   U08,  96,      [0:0],    "Disabled","Enabled"
  adc0MappingCtrl_curve  = bits,   U08,  96,      [4:5],    "A","B","C","D"
  adc1MappingCtrl        = scalar, U08,  97,                "bits",      1,          0,             {minU08}, {maxU08},      0
  adc1MappingCtrl_enable = bits,   U08,  97,      [0:0],    "Disabled","Enabled"
  adc1MappingCtrl_curve  = bits,   U08,  97,      [4:5],    "A","B","C","D"
  adc2MappingCtrl        = scalar, U08,  98,                "bits",      1,          0,             {minU08}, {maxU08},      0
  adc2MappingCtrl_enable = bits,   U08,  98,      [0:0],    "Disabled","Enabled"
  adc2MappingCtrl_curve  = bits,   U08,  98,      [4:5],    "A","B","C","D"
  adc3MappingCtrl        = scalar, U08,  99,                "bits",      1,          0,             {minU08}, {maxU08},      0
  adc3MappingCtrl_enable = bits,   U08,  99,      [0:0],    "Disabled","Enabled"
  adc3MappingCtrl_curve  = bits,   U08,  99,      [4:5],    "A","B","C","D"
  adc4MappingCtrl        = scalar, U08,  100,               "bits",      1,          0,             {minU08}, {maxU08},      0
  adc4MappingCtrl_enable = bits,   U08,  100,     [0:0],    "Disabled","Enabled"
  adc4MappingCtrl_curve  = bits,   U08,  100,     [4:5],    "A","B","C","D"
  adc5MappingCtrl        = scalar, U08,  101,               "bits",      1,          0,             {minU08}, {maxU08},      0
  adc5MappingCtrl_enable = bits,   U08,  101,     [0:0],    "Disabled","Enabled"
  adc5MappingCtrl_curve  = bits,   U08,  101,     [4:5],    "A","B","C","D"

  page = 2
  ; **************************************** inpram *************************************************************************************
  ;name                  = class,  type, offset,  shape,    units,       scale,      translate,     lo,         hi,              decimal digits
  rtBcast_ctrl_enabled   = bits,   U08,  0,       [0:0],    "Disabled","Enabled"
  rtBcast_ctrl_rate      = bits,   U08,  0,       [4:6],    "1Hz","2Hz","5Hz","10Hz","25Hz","50Hz","INVALID","INVALID"
  rtBcast_baseId         = scalar, U16,  1,                 "",          1,          0,             {minRT_Id}, {maxRT_Id},      0
  can_outpc_gp00         = bits,   U08,  3,       [0:0],    "Disabled","Enabled"
  can_outpc_gp01         = bits,   U08,  3,       [1:1],    "Disabled","Enabled"
  can_outpc_gp02         = bits,   U08,  3,       [2:2],    "Disabled","Enabled"
  can_outpc_gp03         = bits,   U08,  3,       [3:3],    "Disabled","Enabled"
  can_outpc_gp04         = bits,   U08,  3,       [4:4],    "Disabled","Enabled"
  can_outpc_gp05         = bits,   U08,  3,       [5:5],    "Disabled","Enabled"
  can_outpc_gp06         = bits,   U08,  3,       [6:6],    "Disabled","Enabled"
  can_outpc_gp07         = bits,   U08,  3,       [7:7],    "Disabled","Enabled"
  can_outpc_gp08         = bits,   U08,  4,       [0:0],    "Disabled","Enabled"
  can_outpc_gp09         = bits,   U08,  4,       [1:1],    "Disabled","Enabled"
  can_outpc_gp10         = bits,   U08,  4,       [2:2],    "Disabled","Enabled"
  can_outpc_gp11         = bits,   U08,  4,       [3:3],    "Disabled","Enabled"
  can_outpc_gp12         = bits,   U08,  4,       [4:4],    "Disabled","Enabled"
  can_outpc_gp13         = bits,   U08,  4,       [5:5],    "Disabled","Enabled"
  can_outpc_gp14         = bits,   U08,  4,       [6:6],    "Disabled","Enabled"
  can_outpc_gp15         = bits,   U08,  4,       [7:7],    "Disabled","Enabled"
  can_outpc_gp16         = bits,   U08,  5,       [0:0],    "Disabled","Enabled"
  can_outpc_gp17         = bits,   U08,  5,       [1:1],    "Disabled","Enabled"
  can_outpc_gp18         = bits,   U08,  5,       [2:2],    "Disabled","Enabled"
  can_outpc_gp19         = bits,   U08,  5,       [3:3],    "Disabled","Enabled"
  can_outpc_gp20         = bits,   U08,  5,       [4:4],    "Disabled","Enabled"
  can_outpc_gp21         = bits,   U08,  5,       [5:5],    "Disabled","Enabled"
  can_outpc_gp22         = bits,   U08,  5,       [6:6],    "Disabled","Enabled"
  can_outpc_gp23         = bits,   U08,  5,       [7:7],    "Disabled","Enabled"
  can_outpc_gp24         = bits,   U08,  6,       [0:0],    "Disabled","Enabled"
  can_outpc_gp25         = bits,   U08,  6,       [1:1],    "Disabled","Enabled"
  can_outpc_gp26         = bits,   U08,  6,       [2:2],    "Disabled","Enabled"
  can_outpc_gp27         = bits,   U08,  6,       [3:3],    "Disabled","Enabled"
  can_outpc_gp28         = bits,   U08,  6,       [4:4],    "Disabled","Enabled"
  can_outpc_gp29         = bits,   U08,  6,       [5:5],    "Disabled","Enabled"
  can_outpc_gp30         = bits,   U08,  6,       [6:6],    "Disabled","Enabled"
  can_outpc_gp31         = bits,   U08,  6,       [7:7],    "Disabled","Enabled"

[Menu]

   ;----------------------------------------------------------------------------
   ;  There are five pre-defined values that may be used to define your menus.
   ;  The first four allow access to the "standard" dialog boxes, the last one
   ;  merely draws a separator (horizontal line) in the menu.
   ;
   ;     std_constants
   ;     std_enrichments
   ;     std_realtime
   ;     std_warmup
   ;     std_accel
   ;
   ;     std_separator
   ;
   ;  If you use any of the std_constants, std_enrichments or std_warmup
   ;  editors, they may be optionally suffixed with a page number (only
   ;  useful for multi-page code variants), which causes them to edit the
   ;  specified page.  If you leave off the page specifier, they edit logical
   ;  page one as specified in the Constants section.
   ;
   ;  There are four special menu names, which when used append to the standard
   ;  menus of the same name instead of creating a new one.  The menu names
   ;  are "File", "Communications", "Tools" and "Help".
   ;
   ;----------------------------------------------------------------------------

  menuDialog = main
      menu = "Analog Settings"
        subMenu = adcMappingControl, "ADC Mapping Control"

      menu = "&Tables/Curves"
        subMenu = adcMappingCurveA,    "ADC Mapping Curve A"
        subMenu = adcMappingCurveB,    "ADC Mapping Curve B"
        subMenu = adcMappingCurveC,    "ADC Mapping Curve C"
        subMenu = adcMappingCurveD,    "ADC Mapping Curve D"

      menu = "C&AN bus/Testmodes"
        subMenu = can_outpc_bcast,   "CAN Realtime Data Broadcasting"
        subMenu = can_outpc_bcast_2, "CAN Realtime Data Broadcasting 2", {rtBcast_ctrl_enabled}

;-------------------------------------------------------------------------------


[UserDefined]
  dialog = adcMappingControl, "ADC Mapping Control"
      field = "ADC0 Mapping Enable",  adc0MappingCtrl_enable
      field = "ADC0 Mapping Curve",   adc0MappingCtrl_curve,    {adc0MappingCtrl_enable == 1}
      field = "ADC1 Mapping Enable",  adc1MappingCtrl_enable
      field = "ADC1 Mapping Curve",   adc1MappingCtrl_curve,    {adc1MappingCtrl_enable == 1}
      field = "ADC2 Mapping Enable",  adc2MappingCtrl_enable
      field = "ADC2 Mapping Curve",   adc2MappingCtrl_curve,    {adc2MappingCtrl_enable == 1}
      field = "ADC3 Mapping Enable",  adc3MappingCtrl_enable
      field = "ADC3 Mapping Curve",   adc3MappingCtrl_curve,    {adc3MappingCtrl_enable == 1}
      field = "ADC4 Mapping Enable",  adc4MappingCtrl_enable
      field = "ADC4 Mapping Curve",   adc4MappingCtrl_curve,    {adc4MappingCtrl_enable == 1}
      field = "ADC5 Mapping Enable",  adc5MappingCtrl_enable
      field = "ADC5 Mapping Curve",   adc5MappingCtrl_curve,    {adc5MappingCtrl_enable == 1}

  dialog = can_outpc_bcast_setting, "", yAxis
      field = "Enable realtime data broadcasting over CAN", rtBcast_ctrl_enabled
      field = "Base message identifier (decimal)", rtBcast_baseId, {rtBcast_ctrl_enabled == 1}
      field = "Broadcasting rate", rtBcast_ctrl_rate, {rtBcast_ctrl_enabled == 1}

  dialog = can_outpc_bcast_1, "", yAxis
      field = "00: ADC0,ADC1,ADC2,ADC3", can_outpc_gp00, { rtBcast_ctrl_enabled }
      field = "01: ADC4,ADC5", can_outpc_gp01, { rtBcast_ctrl_enabled }
      field = "02: ", can_outpc_gp02, { rtBcast_ctrl_enabled }
      field = "03: ", can_outpc_gp03, { rtBcast_ctrl_enabled }
      field = "04: ", can_outpc_gp04, { rtBcast_ctrl_enabled }
      field = "05: ", can_outpc_gp05, { rtBcast_ctrl_enabled }
      field = "06: ", can_outpc_gp06, { rtBcast_ctrl_enabled }
      field = "07: ", can_outpc_gp07, { rtBcast_ctrl_enabled }
      field = "08: ", can_outpc_gp08, { rtBcast_ctrl_enabled }
      field = "09: ", can_outpc_gp09, { rtBcast_ctrl_enabled }
      field = "10: ", can_outpc_gp10, { rtBcast_ctrl_enabled }
      field = "11: ", can_outpc_gp11, { rtBcast_ctrl_enabled }
      field = "12: ", can_outpc_gp12, { rtBcast_ctrl_enabled }
      field = "13: ", can_outpc_gp13, { rtBcast_ctrl_enabled }
      field = "14: ", can_outpc_gp14, { rtBcast_ctrl_enabled }
      field = "15: ", can_outpc_gp15, { rtBcast_ctrl_enabled }
  
  dialog = can_outpc_bcast_2, "CAN Realtime Data Broadcasting 2", yAxis
      field = "16: ", can_outpc_gp16
      field = "17: ", can_outpc_gp17
      field = "18: ", can_outpc_gp18
      field = "19: ", can_outpc_gp19
      field = "20: ", can_outpc_gp20
      field = "21: ", can_outpc_gp21
      field = "22: ", can_outpc_gp22
      field = "23: ", can_outpc_gp23
      field = "24: ", can_outpc_gp24
      field = "25: ", can_outpc_gp25
      field = "26: ", can_outpc_gp26
      field = "27: ", can_outpc_gp27
      field = "28: ", can_outpc_gp28
      field = "29: ", can_outpc_gp29
      field = "30: ", can_outpc_gp30
      field = "31: ", can_outpc_gp31
  
  dialog = can_outpc_bcast, "CAN Realtime Data Broadcasting", yAxis
      panel = can_outpc_bcast_setting, North
      panel = can_outpc_bcast_1, South

;-------------------------------------------------------------------------------

[CurveEditor]
  curve = adcMappingCurveA, "ADC Mapping Curve A"
      topicHelp = "Allows for mapping an ADC channel to another value."
      columnLabel = "ADC", "Value"
      xAxis       = 0, {adcMax}, 6
      yAxis       = {minS16}, {maxS16}, 6
      xBins       = adcMappingCurveA_xBins
      yBins       = adcMappingCurveA_yBins

  curve = adcMappingCurveB, "ADC Mapping Curve B"
      topicHelp = "Allows for mapping an ADC channel to another value."
      columnLabel = "ADC", "Value"
      xAxis       = 0, {adcMax}, 6
      yAxis       = {minS16}, {maxS16}, 6
      xBins       = adcMappingCurveB_xBins
      yBins       = adcMappingCurveB_yBins
  
  curve = adcMappingCurveC, "ADC Mapping Curve C"
      topicHelp = "Allows for mapping an ADC channel to another value."
      columnLabel = "ADC", "Value"
      xAxis       = 0, {adcMax}, 6
      yAxis       = {minS16}, {maxS16}, 6
      xBins       = adcMappingCurveC_xBins
      yBins       = adcMappingCurveC_yBins
  
  curve = adcMappingCurveD, "ADC Mapping Curve D"
      topicHelp = "Allows for mapping an ADC channel to another value."
      columnLabel = "ADC", "Value"
      xAxis       = 0, {adcMax}, 6
      yAxis       = {minS16}, {maxS16}, 6
      xBins       = adcMappingCurveD_xBins
      yBins       = adcMappingCurveD_yBins

[TableEditor]

[GaugeConfigurations]
gaugeCategory = "Analog Inputs";
  ;Name                   Var              Title                  Units    Lo         Hi         LoD        LoW        HiW        HiD         vd   ld
  adc0Gauge             = adc0,            "ADC0",                "",      {minS16},  {maxS16},  {maxS16},  {maxS16},  {maxS16},  {maxS16},   0,   0
  adc1Gauge             = adc1,            "ADC1",                "",      {minS16},  {maxS16},  {maxS16},  {maxS16},  {maxS16},  {maxS16},   0,   0
  adc2Gauge             = adc2,            "ADC2",                "",      {minS16},  {maxS16},  {maxS16},  {maxS16},  {maxS16},  {maxS16},   0,   0
  adc3Gauge             = adc3,            "ADC3",                "",      {minS16},  {maxS16},  {maxS16},  {maxS16},  {maxS16},  {maxS16},   0,   0
  adc4Gauge             = adc4,            "ADC4",                "",      {minS16},  {maxS16},  {maxS16},  {maxS16},  {maxS16},  {maxS16},   0,   0
  adc5Gauge             = adc5,            "ADC5",                "",      {minS16},  {maxS16},  {maxS16},  {maxS16},  {maxS16},  {maxS16},   0,   0

gaugeCategory = "X-Code dev"; for diagnotics
  ;Name                   Var              Title                  Units    Lo     Hi         LoD        LoW        HiW        HiD         vd   ld
  canErrorCountGauge    = canErrorCount,   "CAN Error Count",     "",      0,     {maxU08},  255,       255,       1,         10,         0,   0
  loopTimeGauge         = loopTimeUs,      "Mainloop Time",       "us",    0,     {maxU16},  255,       255,       255,       255,        0,   0
  deadGauge             = deadValue,       "---",                 "",      0,     1,         -1,        -1,        2,         2,          0,   0
  currFlashTableGauge   = currFlashTable,  "Current Flash Table", "",      0,     15,        15,        15,        15,        15,         0,   0

;  - Regardless of the order shown here, the gauges are listed in the TunerStudio drop-down menu in capital/upper case
;    alphabetical order, then lower case/alphabetical order (i.e., by ASCII numbering).

;-------------------------------------------------------------------------------

[FrontPage]

   ; Gauges are numbered left to right, top to bottom.
   ;
   ;    1  2  3  4
   ;    5  6  7  8
   gauge1 = adc0Gauge
   gauge2 = adc1Gauge
   gauge3 = adc2Gauge
   gauge4 = adc3Gauge
   gauge5 = adc4Gauge
   gauge6 = adc5Gauge
   gauge7 = loopTimeGauge
   gauge8 = currFlashTableGauge

   ;----------------------------------------------------------------------------
   ; Indicators
   ;               expr             off-label           on-label,           off-bg, off-fg, on-bg,  on-fg
   indicator     = {needsBurn},     "Need Burn",        "Need Burn",        white,  black,  red,    black
   indicator     = {flashDataLost}, "Flash Data Lost",  "Flash Data Lost",  white,  black,  red,    black

   ;-------------------------------------------------------------------------------

[RunTime]
;   barHysteresis = 2.5 ; Seconds

;-------------------------------------------------------------------------------

[Tuning]

;-------------------------------------------------------------------------------

[AccelerationWizard]
; not used for trans control

;-------------------------------------------------------------------------------

[BurstMode]
   getCommand       = "a\x00\x06"

[OutputChannels]
; These are from the outpc. structure in the main.c file of the source code
; the size and format are the same as above
  deadValue  = { 0 }; convenient unchanging value
  adcMin     = { 0 }; min value from Arduino ADC
  adcMax     = { 1023 }; max value from Arduino ADC
  minU08     = { 0 }; min value of a 8bit unsigned integer
  maxU08     = { 255 }; max value of a 8bit unsigned integer
  minU16     = { 0 }; min value of a 16bit unsigned integer
  maxU16     = { 65535 }; max value of a 16bit unsigned integer
  minS16     = { -32768 }; min value of a 16bit signed integer
  maxS16     = { 32767 }; max value of a 16bit signed integer
  minRT_Id   = { 0 }; min real-time data broadcast Id
  maxRT_Id   = { 2047 }; max real-time data broadcast Id

  ochBlockSize     = 128 ; change this if adding extra data to outpc
#if CAN_COMMANDS
;full version that works anywhere
   ochGetCommand    = "r\$tsCanId\x00%2o%2c"; read from table 0
#else
; fast get via serial
   ochGetCommand       = "A"
#endif

  ; ************************************************************* outpc ********************************************************************
  ;name                = class,  type, offset,         shape,    units,       scale,      translate
  canStatus            = bits,   U08,  0,              [0:7]     "",          1,          0           ; status register for CAN interface
  canStatus_rxOverFlow = bits,   U08,  0,              [0:0]                                          ; 1 if CAN Rx FIFO overflowed
  canStatus_txFailed   = bits,   U08,  0,              [1:1]                                          ; 1 if CAN Tx failed
  canErrorCount        = scalar, U08,  1,                        "",          1,          0           ; number of CAN errors
  loopTimeUs           = scalar, U16,  2,                        "us",        1,          0           ; main loop's execution time
  status0              = scalar, U08,  4,                        "bits",      1,          0           ; status register 0
  needsBurn            = bits,   U08,  4,              [0:0]                                          ; 1 if needs a flash page burned
  flashDataLost        = bits,   U08,  4,              [1:1]                                          ; 1 if unburned flash page was swapped out
  currFlashTable       = bits,   U08,  4,              [4:7]                                          ; current flash table loaded into RAM
  adc0                 = scalar, S16,  10,                       "",          1,          0           ; ADC 0 values (raw or mapped)
  adc1                 = scalar, S16,  12,                       "",          1,          0           ; ADC 1 values (raw or mapped)
  adc2                 = scalar, S16,  14,                       "",          1,          0           ; ADC 2 values (raw or mapped)
  adc3                 = scalar, S16,  16,                       "",          1,          0           ; ADC 3 values (raw or mapped)
  adc4                 = scalar, S16,  18,                       "",          1,          0           ; ADC 4 values (raw or mapped)
  adc5                 = scalar, S16,  20,                       "",          1,          0           ; ADC 5 values (raw or mapped)

;-------------------------------------------------------------------------------
;--  The entries are saved in the datalog file in the order in which they     --
;--  appear in the list below.                                                --
;--                                                                           --
;--   Channel - Case sensitive name of output channel to be logged.           --
;--   Label   - String written to header line of log.                         --
;--   Type    - Data type of output, converted before writing.                --
;--   Format  - C-style output format of data.                                --

[Datalog]
   ;       Channel            Label          Type    Format
   ;       --------------     ----------     -----   ------

; -----------------------------------------------------------
[SettingContextHelp]
adc0MappingCtrl_enable = "Enables mapping of an ADC channel using a given curve."
adc1MappingCtrl_enable = "Enables mapping of an ADC channel using a given curve."
adc2MappingCtrl_enable = "Enables mapping of an ADC channel using a given curve."
adc3MappingCtrl_enable = "Enables mapping of an ADC channel using a given curve."
adc4MappingCtrl_enable = "Enables mapping of an ADC channel using a given curve."
adc5MappingCtrl_enable = "Enables mapping of an ADC channel using a given curve."
adc0MappingCtrl_curve  = "The curve to reference when ADC channel mapping is enabled."
adc1MappingCtrl_curve  = "The curve to reference when ADC channel mapping is enabled."
adc2MappingCtrl_curve  = "The curve to reference when ADC channel mapping is enabled."
adc3MappingCtrl_curve  = "The curve to reference when ADC channel mapping is enabled."
adc4MappingCtrl_curve  = "The curve to reference when ADC channel mapping is enabled."
adc5MappingCtrl_curve  = "The curve to reference when ADC channel mapping is enabled."

; -----------------------------------------------------------
[ConstantsExtensions]
