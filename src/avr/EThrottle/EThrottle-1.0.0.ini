; INI date: 9:35am, Jun 01, 2017
;------------------------------------------------------------------------------
; Units - "unset" to change to metric units in TunerStudioMS (to match values returned
; from MShift/GPIO controller when metric units are chosen).
; defaults are imperial units
#unset CELSIUS
#unset SI_LENGTHS
; otherwise METRIC units are used

; unset CAM_COMMANDS if you want to interface to GPIO directly through serial
; otherwise, this will interface through CAN pass-through
#set CAN_COMMANDS

;----------------------------------------------------------------------------

[MegaTune]
   MTversion      = 2.25 ; MegaTune itself; needs to match exec version.

#if CAN_COMMANDS
   versionInfo    = "r\$tsCanId\x0e\x00\x00\x00\x3c"  ; Title bar, this is the code version.
   queryCommand   = "r\$tsCanId\x0f\x00\x00\x00\x14"  ; 20 bytes from table 15. Verify against signature.
#else
   versionInfo    = "S"  ; Put this in the title bar.
   queryCommand   = "Q"  ; Verify against signature.
#endif
   signature      = "OpenGPIO-1.0.0     " ; EThrottle sends a null at 20th byte.
                   ; 123456789.123456789.

#  set LOAD_KPA

;----------------------------------------------------------------------------


[ReferenceTables]

    tableWriteCommand   = "t" ;

    referenceTable = canOutmsgBurner, "Configure CAN Outmsg"
      ;topicHelp = "http://www.megamanual.com/mt29.htm#outmsg"
        tableIdentifier = 010, "outmsg Table"       ; id in octal, 010 = table 8
        adcCount  = 1024  ; length of the table
        bytesPerAdc   = 1   ; using bytes
        scale   = 1 ; scale before sending to controller
        ;tableGenerator = Generator Type,     Label, xUnits, yUnits,  xLow, xHi,  yLow, yHi ; lows and highs are just default values, they will be user editable
      ;tableGenerator = linearGenerator, "Custom Linear WB", "Volts","AFR",    1,   4,   9.7,  18.7
      solutionsLabel  = "CAN Outmsg"
      solution  = "CAN Outmsg",   { table(adcValue, "canOutmsg.inc") }

;-------------------------------------------------------------------------------

[Constants]

   ;----------------------------------------------------------------------------
   ; Constants Definition
   ; --------------------
   ;
   ; Scalar Values
   ; -------------
   ; The scaling and translation values are used as follows:
   ;    msValue   = userValue / scale - translate
   ;    userValue = (msValue + translate) * scale
   ;
   ;
   ; Array Values
   ; ------------
   ; Arrays are specified just like scalars, except that they have a "shape"
   ; entry in the fourth parameter.  The shape allows you to define lists or
   ; tables, for example [8] defines a list with eight values and [2x4] defines
   ; a table with eight values (two rows and four columns).  Tables may be
   ; stored in either "X-" or "Y-order."  X-order means that memory is laid
   ; out as follows.
   ;
   ;     [x1,y1] [x2,y1]...[xn,y1] [x1,y2]...
   ;
   ; Y-order would be
   ;
   ;     [x1,y1] [x1,y2]...[x1,yn] [x2,y1]...
   ;
   ; To use the TableEditor, you must define two lists and a table, and
   ; the lengths of the lists must correspond to the shape of the table.
   ;
   ; Bit Fields
   ; ----------
   ; Bits are numbered 0-7, the rightmost being bit zero.  The basic
   ; data word that stores bit fields must be unsigned.
   ;
   ; You need NOT supply the correct number of labels matching the
   ; number of bits you've specified (one bit requires 2 values, two
   ; bits requires 4 values and so on).  If you neglect to supply enough
   ; labels, they will be synthesized using the sequence "1", "2" and so
   ; on based upon their position in the sequence (the cltType and matType
   ; will end up with identical lists).
   ;
   ;----------------------------------------------------------------------------

   pageActivationDelay = 250 ; Milliseconds delay after burn command.
   blockReadTimeout    = 180 ; Milliseconds total timeout for reading page.



; MUST set nPages *before* blocking factor, or will get "turboBaud" error

   endianness          = big
   nPages              = 2
; page size must be divisible by 8 for TS CAN pass-through compatibility
   ; Note: these are lists of commands for each page defined
   ;                     | Page 1          | Page 2          | Page 3          |
   ;                     |-----------------|-----------------|-----------------|
   pageSize            =  128              ,128
   pageIdentifier      =  "\$tsCanId\x01"  ,"\$tsCanId\x02"
   burnCommand         =  "b\$tsCanId\x01" ,"b\$tsCanId\x02"
   pageReadCommand     =  "r%2i%2o%2c"     ,"r%2i%2o%2c"
   pageValueWrite      =  "w%2i%2o%2c%v"   ,"w%2i%2o%2c%v"
   pageChunkWrite      =  "w%2i%2o%2c%v"   ,"w%2i%2o%2c%v"

; The commands sent to the device are formatted "command\CAN_ID\table_ID\table offset\num.bytes"
; i.e. cmd\CAN_ID\Table_ID\Table_offset\Num_Bytes
; where:
; cmd => ascii 'r' (x72): Read and send back RAM user input parameters from offset location, others commands are:
;              'a' (x61): send back All real time ram output variables
;              'w' (x77): receive new ram input data and Write into offset location;
;              'e' (x65): same as 'w', but verify by Echoing back values, up to sizeof(txbuf).
;              'y' (x79): verify that a flash data block matches a corresponding ram data block
;              'b' (x62): Burn a block of ram input values into flash;
;              't' (x74): update a flash Table with following serial data
;              '!' (x21): start receiving reinit/reboot command
;              'c' (x63): send back seconds to test Comms
;              'Q' (x51): send code revision number
;              'S' (x53): send program title
;              'k' (x68): request checksum.
; CAN_ID is the controller's unique ID number (from 0 to 15) - 1 byte
; %2i is the id/table number - 1 byte
; %2o is the table offset - 2 bytes
; %2c is the number of bytes to be read/written - 2 bytes
; %v is the byte to be sent/written - 1 bytes
; so there are 7 bytes to a message

; Example: from TS comm log
; Time: 0:33.314: SENT, 7 bytes
; x72 x01 x07 x00 x38 x00 x08
; is in format ; or r%2i%2o%2c, and
; means:
; x72 => ascii 'r' (character 72): Read and send back RAM user input parameters from offset location,
; x01 => from controller using can_id=1,
; x07 => values in table=7 (outpc),
; x00 & x38 => at offset 38h (56 decimal) - need two bytes since we may require an offset greater than 255,
; x00 & x08 => read and send 8 bytes

;   C Type                 Bits            Range                    TunerStudio INI Designation
;   ------                 ----            -----                    ---------------------------

; - char (=signed char)     8              -128 to 127               S08 (one byte offset each)
; - unsigned char           8                 0 to 255               U08

; ...............................................................................................

; - int  (=signed int)     16          -32768 to 32767               S16 (two byte offset each)
;   (= short)

; - unsigned int           16               0 to 65535               U16
;   (=unsigned short int)

; ................................................................................................

; - long  (=signed long)   32          -2�� to 2�� - 1               S32 (four byte offset each)
;   (=long int)

; - unsigned long          32             0 to 2�� - 1               U32
;   (=unsigned long int)

; ................................................................................................

; Note that variables are signed unless designated otherwise.

; MUST set nPages *before* blocking factor, or will get "turboBaud" error
#if CAN_COMMANDS
   blockingFactor = 64
#endif

; For the most part, the parameters below have the same names as in the source code.
; This isn't required (since it is the actual memory addresses that are used),
; but it does help when trying to understand and discuss the source code.

  page = 1
  ; **************************************** inpram *************************************************************************************
  ;name                      = class,  type, offset,  shape,    units,       scale,      translate,     lo,       hi,            decimal digits
  throttleKp                 = scalar, U16,  0,                 "",          0.01,       0.0,           0.0,      1.0,           2
  throttleKi                 = scalar, U16,  2,                 "",          0.01,       0.0,           0.0,      1.0,           2
  throttleKd                 = scalar, U16,  4,                 "",          0.01,       0.0,           0.0,      1.0,           2
  reserved0                  = scalar, U16,  6,                 "",          1.0,        0.0,           0.0,      1.0,           0
  ppsCalA_min                = scalar, U16,  8,                 "ADC",       1.0,        0.0,           {adcMin}, {adcMax},      0
  ppsCalA_max                = scalar, U16,  10,                "ADC",       1.0,        0.0,           {adcMin}, {adcMax},      0
  ppsCalB_min                = scalar, U16,  12,                "ADC",       1.0,        0.0,           {adcMin}, {adcMax},      0
  ppsCalB_max                = scalar, U16,  14,                "ADC",       1.0,        0.0,           {adcMin}, {adcMax},      0
  tpsCalA_min                = scalar, U16,  16,                "ADC",       1.0,        0.0,           {adcMin}, {adcMax},      0
  tpsCalA_max                = scalar, U16,  18,                "ADC",       1.0,        0.0,           {adcMin}, {adcMax},      0
  tpsCalB_min                = scalar, U16,  20,                "ADC",       1.0,        0.0,           {adcMin}, {adcMax},      0
  tpsCalB_max                = scalar, U16,  22,                "ADC",       1.0,        0.0,           {adcMin}, {adcMax},      0
  sensorSetup_comparePPS     = bits,   U08,  24,      [0:0],    "Disabled","Enabled"
  sensorSetup_preferPPS_A    = bits,   U08,  24,      [1:1],    "PPS B","PPS A"
  sensorSetup_compareTPS     = bits,   U08,  24,      [2:2],    "Disabled","Enabled"
  sensorSetup_preferTPS_A    = bits,   U08,  24,      [3:3],    "TPS B","TPS A"
  sensorSetup_rsvd           = bits,   U08,  24,      [4:7]
  reserved0                  = scalar, U08,  25,                "",          1.0,        0.0,           0.0,      1.0,           0
  reserved1                  = scalar, U16,  26,                "",          1.0,        0.0,           0.0,      1.0,           0
  ppsCompCurve_xBins         = array,  U16,  28,      [4],      "ADC",       1,          0,             {adcMin}, {adcMax},      0
  ppsCompCurve_yBins         = array,  U16,  36,      [4],      "ADC",       1,          0,             {adcMin}, {adcMax},      0
  tpsCompCurve_xBins         = array,  U16,  44,      [4],      "ADC",       1,          0,             {adcMin}, {adcMax},      0
  tpsCompCurve_yBins         = array,  U16,  52,      [4],      "ADC",       1,          0,             {adcMin}, {adcMax},      0
  ppsCompareThresh           = scalar, U16,  60,                "ADC",       1,          0,             {adcMin}, {adcMax},      0
  tpsCompareThresh           = scalar, U16,  62,                "ADC",       1,          0,             {adcMin}, {adcMax},      0
  tpsStall                   = scalar, U16,  64,                "%",         0.01,       0.0,           0.0,      100.0,         2
  msqRtBcastBaseId           = scalar, U16,  66,                "",          1,          0,             0,        2047,          0

  page = 2
  ; **************************************** inpram *************************************************************************************
  ;name                  = class,  type, offset,  shape,    units,       scale,      translate,     lo,         hi,              decimal digits
  rtBcast_ctrl_enabled   = bits,   U08,  0,       [0:0],    "Disabled","Enabled"
  rtBcast_ctrl_rate      = bits,   U08,  0,       [4:6],    "1Hz","2Hz","5Hz","10Hz","25Hz","50Hz","INVALID","INVALID"
  rtBcast_baseId         = scalar, U16,  1,                 "",          1,          0,             {minRT_Id}, {maxRT_Id},      0
  can_outpc_gp00         = bits,   U08,  3,       [0:0],    "Disabled","Enabled"
  can_outpc_gp01         = bits,   U08,  3,       [1:1],    "Disabled","Enabled"
  can_outpc_gp02         = bits,   U08,  3,       [2:2],    "Disabled","Enabled"
  can_outpc_gp03         = bits,   U08,  3,       [3:3],    "Disabled","Enabled"
  can_outpc_gp04         = bits,   U08,  3,       [4:4],    "Disabled","Enabled"
  can_outpc_gp05         = bits,   U08,  3,       [5:5],    "Disabled","Enabled"
  can_outpc_gp06         = bits,   U08,  3,       [6:6],    "Disabled","Enabled"
  can_outpc_gp07         = bits,   U08,  3,       [7:7],    "Disabled","Enabled"
  can_outpc_gp08         = bits,   U08,  4,       [0:0],    "Disabled","Enabled"
  can_outpc_gp09         = bits,   U08,  4,       [1:1],    "Disabled","Enabled"
  can_outpc_gp10         = bits,   U08,  4,       [2:2],    "Disabled","Enabled"
  can_outpc_gp11         = bits,   U08,  4,       [3:3],    "Disabled","Enabled"
  can_outpc_gp12         = bits,   U08,  4,       [4:4],    "Disabled","Enabled"
  can_outpc_gp13         = bits,   U08,  4,       [5:5],    "Disabled","Enabled"
  can_outpc_gp14         = bits,   U08,  4,       [6:6],    "Disabled","Enabled"
  can_outpc_gp15         = bits,   U08,  4,       [7:7],    "Disabled","Enabled"
  can_outpc_gp16         = bits,   U08,  5,       [0:0],    "Disabled","Enabled"
  can_outpc_gp17         = bits,   U08,  5,       [1:1],    "Disabled","Enabled"
  can_outpc_gp18         = bits,   U08,  5,       [2:2],    "Disabled","Enabled"
  can_outpc_gp19         = bits,   U08,  5,       [3:3],    "Disabled","Enabled"
  can_outpc_gp20         = bits,   U08,  5,       [4:4],    "Disabled","Enabled"
  can_outpc_gp21         = bits,   U08,  5,       [5:5],    "Disabled","Enabled"
  can_outpc_gp22         = bits,   U08,  5,       [6:6],    "Disabled","Enabled"
  can_outpc_gp23         = bits,   U08,  5,       [7:7],    "Disabled","Enabled"
  can_outpc_gp24         = bits,   U08,  6,       [0:0],    "Disabled","Enabled"
  can_outpc_gp25         = bits,   U08,  6,       [1:1],    "Disabled","Enabled"
  can_outpc_gp26         = bits,   U08,  6,       [2:2],    "Disabled","Enabled"
  can_outpc_gp27         = bits,   U08,  6,       [3:3],    "Disabled","Enabled"
  can_outpc_gp28         = bits,   U08,  6,       [4:4],    "Disabled","Enabled"
  can_outpc_gp29         = bits,   U08,  6,       [5:5],    "Disabled","Enabled"
  can_outpc_gp30         = bits,   U08,  6,       [6:6],    "Disabled","Enabled"
  can_outpc_gp31         = bits,   U08,  6,       [7:7],    "Disabled","Enabled"

; -----------------------------------------------------------
[ConstantsExtensions]
    requiresPowerCycle = msqRtBcastBaseId

; -----------------------------------------------------------
[SettingContextHelp]
    sensorSetup_comparePPS = "Enable/disable safety feature that compares redundant PPS sensors A and B.\nAfter enabling this feature, config the PPS comparison curve."
    sensorSetup_preferPPS_A = "Set this to the PPS sensor that provides values over the full range of the accelrator pedal.\nSome pedals will hit min/max ADC readings earlier than expected."
    sensorSetup_compareTPS = "Enable/disable safety feature that compares redundant TPS sensors A and B.\nAfter enabling this feature, config the TPS comparison curve."
    sensorSetup_preferTPS_A = "Set this to the TPS sensor that provides values over the full range of the throttle blade.\nSome throttles will hit min/max ADC readings earlier than expected."
    ppsCompareThresh = "Threshold driving the PPS A/B comparison logic.\nThe algorithm will lookup an expected ADC reading for the 'secondary' sensor, given the prefered\n'primary' sensor's ADC. If the expected value differs the actual value by more than this threshold, then\na PPS sensor fault will be flagged, and the PPS position will default to 0%."
    tpsCompareThresh = "Threshold driving the TPS A/B comparison logic.\nThe algorithm will lookup an expected ADC reading for the 'secondary' sensor, given the prefered\n'primary' sensor's ADC. If the expected value differs the actual value by more than this threshold, then\na TPS sensor fault will be flagged, and the throttle motor will be disabled."
    tpsStall = "Minimum tps value that the engine can continue to run at.\nGoing below this tps value will cause the engine to stall."
    msqRtBcastBaseId = "megasquirt's base message identifier (decimal) for it's realtime data broadcasting feature."

[Menu]

   ;----------------------------------------------------------------------------
   ;  There are five pre-defined values that may be used to define your menus.
   ;  The first four allow access to the "standard" dialog boxes, the last one
   ;  merely draws a separator (horizontal line) in the menu.
   ;
   ;     std_constants
   ;     std_enrichments
   ;     std_realtime
   ;     std_warmup
   ;     std_accel
   ;
   ;     std_separator
   ;
   ;  If you use any of the std_constants, std_enrichments or std_warmup
   ;  editors, they may be optionally suffixed with a page number (only
   ;  useful for multi-page code variants), which causes them to edit the
   ;  specified page.  If you leave off the page specifier, they edit logical
   ;  page one as specified in the Constants section.
   ;
   ;  There are four special menu names, which when used append to the standard
   ;  menus of the same name instead of creating a new one.  The menu names
   ;  are "File", "Communications", "Tools" and "Help".
   ;
   ;----------------------------------------------------------------------------

  menuDialog = main
      menu = "Basic/Load Settings"
        subMenu = sensorSetup, "Sensor Setup"
        subMenu = ppsCompareCurvePreferA, "PPS Comparison Curve (A prefered)", {(sensorSetup_comparePPS) && (sensorSetup_preferPPS_A == 1)}
        subMenu = ppsCompareCurvePreferB, "PPS Comparison Curve (B prefered)", {(sensorSetup_comparePPS) && (sensorSetup_preferPPS_A == 0)}
        subMenu = tpsCompareCurvePreferA, "TPS Comparison Curve (A prefered)", {(sensorSetup_compareTPS) && (sensorSetup_preferTPS_A == 1)}
        subMenu = tpsCompareCurvePreferB, "TPS Comparison Curve (B prefered)", {(sensorSetup_compareTPS) && (sensorSetup_preferTPS_A == 0)}
        subMenu = std_separator
        subMenu = throttlePID_Control, "Throttle PID Control"
        subMenu = std_separator
        subMenu = ppsSensorCal, "PPS Sensor Calibration"
        subMenu = tpsSensorCal, "TPS Sensor Calibration"
        subMenu = std_separator
        subMenu = tpsTargetCalcSummary, "TPS Target Calculation Summary"

      menu = "C&AN bus/Testmodes"
        subMenu = can_input_bcast_settings, "CAN Listening Settings"
        subMenu = std_separator
        subMenu = can_outpc_bcast,   "CAN Realtime Data Broadcasting"
        subMenu = can_outpc_bcast_2, "CAN Realtime Data Broadcasting 2", {rtBcast_ctrl_enabled}
        subMenu = std_separator
        subMenu = diagnostics, "Diagnostics"

;-------------------------------------------------------------------------------

[ControllerCommands]
; commandName    = command1, command2, commandn...
; command in standard ini format, a command name can be assigned to 1 to n commands that will be executed in order.
;         This dos not include any resultant protocol envelope data, only the response data itself.

; WARNING!! These commands bypass TunerStudio's normal memory synchronization. If these commands
; alter mapped settings (Constant) memory in the controller, TunerStudio will have an out of sync condition 
; and may create error messages.
; It is expected that these commands would not typically alter any ram mapped to a Constant.
  ;                              tableId, offsetMSB, offsetLSB, lenMSB, lenLSB, data[0], data[1], ..., data[len-1]
  cmdDisableThrottle = "w\$tsCanId\x03\x00\x00\x00\x03\x74\x30\x00" ; uartCmd = "t0"
  cmdEnableThrottle = "w\$tsCanId\x03\x00\x00\x00\x03\x74\x31\x00"  ; uartCmd = "t1"
  cmdClrAllFaults = "w\$tsCanId\x03\x00\x00\x00\x03\x63\x41\x00"  ; uartCmd = "cA"
  cmdClrDriverFault = "w\$tsCanId\x03\x00\x00\x00\x03\x63\x64\x00"  ; uartCmd = "cd"
  cmdClrPPS_Fault = "w\$tsCanId\x03\x00\x00\x00\x03\x63\x70\x00"  ; uartCmd = "cp"
  cmdClrTPS_Fault = "w\$tsCanId\x03\x00\x00\x00\x03\x63\x74\x00"  ; uartCmd = "ct"
  cmdSoftReset = "w\$tsCanId\x03\x00\x00\x00\x02\x72\x00"  ; uartCmd = "r"

[UserDefined]
  dialog = sensorSafetySetup, "Sensor Safety"
      field = "Compare PPS Sensors",  sensorSetup_comparePPS
      field = "PPS Threshold", ppsCompareThresh, {sensorSetup_comparePPS}
      field = "Compare TPS Sensors",  sensorSetup_compareTPS
      field = "TPS Threshold", tpsCompareThresh, {sensorSetup_compareTPS}

  dialog = sensorSetup, "General Settings", yAxis
      field = "Prefered PPS Sensor",  sensorSetup_preferPPS_A
      field = "Prefered TPS Sensor",  sensorSetup_preferTPS_A
      panel = sensorSafetySetup

  dialog = throttle_pid_coeffs, "Throttle PID Coefficients"
      slider = "Throttle PID (Kp)",  throttleKp
      slider = "Throttle PID (Ki)",  throttleKi
      slider = "Throttle PID (Kd)",  throttleKd

  dialog = throttlePID_Control, "", yAxis
      liveGraph = timeThrottlePID_Graph, "PID Graph"
        graphLine = pps
        graphLine = tps
        graphLine = tpsTarget
      field = "TPS Stall", tpsStall
      panel = throttle_pid_coeffs

  dialog = ppsCalRange
      field = "PPS A Min",  ppsCalA_min
      field = "PPS A Max",  ppsCalA_max
      field = "PPS B Min",  ppsCalB_min
      field = "PPS B Max",  ppsCalB_max

  dialog = ppsSensorCal, "Range Calibration", xAxis
      panel = ppsCalRange, West
      liveGraph = ppsGraph, "PPS A/B Graph", East
        graphLine = ppsA, "ADC", 0, 0, auto, auto
        graphLine = ppsB, "ADC", 0, 0, auto, auto

  dialog = tpsCalRange
      field = "TPS A Min",  tpsCalA_min
      field = "TPS A Max",  tpsCalA_max
      field = "TPS B Min",  tpsCalB_min
      field = "TPS B Max",  tpsCalB_max

  dialog = tpsSensorCal, "Range Calibration", xAxis
      panel = tpsCalRange, West
      liveGraph = tpsGraph, "TPS A/B Graph", East
        graphLine = tpsA, "ADC", 0, 0, auto, auto
        graphLine = tpsB, "ADC", 0, 0, auto, auto

  dialog = tpsTargetCalc0, "", xAxis
      field = "TPS Stall", tpsStall
      gauge = idleAdderGauge
      gauge = ppsAdderGauge

  dialog = tpsTargetCalcSummary, "", yAxis
      panel = tpsTargetCalc0
      gauge = tpsTargetGauge

  dialog = can_outpc_bcast_setting, "", yAxis
      field = "Enable realtime data broadcasting over CAN", rtBcast_ctrl_enabled
      field = "Base message identifier (decimal)", rtBcast_baseId, {rtBcast_ctrl_enabled == 1}
      field = "Broadcasting rate", rtBcast_ctrl_rate, {rtBcast_ctrl_enabled == 1}

  dialog = can_outpc_bcast_1, "", yAxis
      field = "00: ADC0,ADC1,ADC2,ADC3", can_outpc_gp00, { rtBcast_ctrl_enabled }
      field = "01: ADC4,ADC5", can_outpc_gp01, { rtBcast_ctrl_enabled }
      field = "02: ", can_outpc_gp02, { rtBcast_ctrl_enabled }
      field = "03: ", can_outpc_gp03, { rtBcast_ctrl_enabled }
      field = "04: ", can_outpc_gp04, { rtBcast_ctrl_enabled }
      field = "05: ", can_outpc_gp05, { rtBcast_ctrl_enabled }
      field = "06: ", can_outpc_gp06, { rtBcast_ctrl_enabled }
      field = "07: ", can_outpc_gp07, { rtBcast_ctrl_enabled }
      field = "08: ", can_outpc_gp08, { rtBcast_ctrl_enabled }
      field = "09: ", can_outpc_gp09, { rtBcast_ctrl_enabled }
      field = "10: ", can_outpc_gp10, { rtBcast_ctrl_enabled }
      field = "11: ", can_outpc_gp11, { rtBcast_ctrl_enabled }
      field = "12: ", can_outpc_gp12, { rtBcast_ctrl_enabled }
      field = "13: ", can_outpc_gp13, { rtBcast_ctrl_enabled }
      field = "14: ", can_outpc_gp14, { rtBcast_ctrl_enabled }
      field = "15: ", can_outpc_gp15, { rtBcast_ctrl_enabled }
  
  dialog = can_outpc_bcast_2, "CAN Realtime Data Broadcasting 2", yAxis
      field = "16: ", can_outpc_gp16
      field = "17: ", can_outpc_gp17
      field = "18: ", can_outpc_gp18
      field = "19: ", can_outpc_gp19
      field = "20: ", can_outpc_gp20
      field = "21: ", can_outpc_gp21
      field = "22: ", can_outpc_gp22
      field = "23: ", can_outpc_gp23
      field = "24: ", can_outpc_gp24
      field = "25: ", can_outpc_gp25
      field = "26: ", can_outpc_gp26
      field = "27: ", can_outpc_gp27
      field = "28: ", can_outpc_gp28
      field = "29: ", can_outpc_gp29
      field = "30: ", can_outpc_gp30
      field = "31: ", can_outpc_gp31

  dialog = can_input_bcast_settings, "CAN Listening Settings", yAxis
      field = "Megasquirt realtime base msg ID (decimal)", msqRtBcastBaseId
  
  dialog = can_outpc_bcast, "CAN Realtime Data Broadcasting", yAxis
      panel = can_outpc_bcast_setting, North
      panel = can_outpc_bcast_1, South

  dialog = diagThrottleBtns, "Throttle Control", xAxis
      commandButton = "Disable Throttle", cmdDisableThrottle, {status_throttleEnabled == 1}
      commandButton = "Enable Throttle", cmdEnableThrottle, {status_throttleEnabled == 0}

  dialog = diagMCU_CtrlBtns, "MCU Control", xAxis
      commandButton = "Soft Reset", cmdSoftReset

  dialog = diagClrFaultBtns, "Clear Faults", xAxis
      commandButton = "Clear All Faults", cmdClrAllFaults
      commandButton = "Clear Driver Fault", cmdClrDriverFault
      commandButton = "Clear PPS Fault", cmdClrPPS_Fault
      commandButton = "Clear TPS Fault", cmdClrTPS_Fault

  dialog = diagnostics, "", yAxis
      panel = diagThrottleBtns
      panel = diagMCU_CtrlBtns
      panel = diagClrFaultBtns

;-------------------------------------------------------------------------------

[CurveEditor]
  curve = ppsCompareCurvePreferA, "PPS B vs. A Comparison Curve"
      columnLabel = "PPS A", "PPS B" 
      xAxis       = {adcMin}, {adcMax}, 4
      yAxis       = {adcMin}, {adcMax}, 4
      xBins       = ppsCompCurve_xBins, ppsA
      yBins       = ppsCompCurve_yBins
      gauge       = ppsB

  curve = ppsCompareCurvePreferB, "PPS A vs. B Comparison Curve"
      columnLabel = "PPS B", "PPS A" 
      xAxis       = {adcMin}, {adcMax}, 4
      yAxis       = {adcMin}, {adcMax}, 4
      xBins       = ppsCompCurve_xBins, ppsB
      yBins       = ppsCompCurve_yBins
      gauge       = ppsA

  curve = tpsCompareCurvePreferA, "TPS B vs. A Comparison Curve"
      columnLabel = "TPS A", "TPS B" 
      xAxis       = {adcMin}, {adcMax}, 4
      yAxis       = {adcMin}, {adcMax}, 4
      xBins       = tpsCompCurve_xBins, tpsA
      yBins       = tpsCompCurve_yBins
      gauge       = tpsB

  curve = tpsCompareCurvePreferB, "TPS A vs. B Comparison Curve"
      columnLabel = "TPS B", "TPS A" 
      xAxis       = {adcMin}, {adcMax}, 4
      yAxis       = {adcMin}, {adcMax}, 4
      xBins       = tpsCompCurve_xBins, tpsB
      yBins       = tpsCompCurve_yBins
      gauge       = tpsA

[TableEditor]

[GaugeConfigurations]
gaugeCategory = "Sensors";
  ;Name                   Var              Title                  Units    Lo         Hi         LoD        LoW        HiW        HiD         vd   ld
  tpsAGauge             = tpsA,            "tpsA",                "ADC",   {adcMin},  {adcMax},  {adcMin},  {adcMin},  {adcMax},  {adcMax},   0,   0
  tpsBGauge             = tpsB,            "tpsB",                "ADC",   {adcMin},  {adcMax},  {adcMin},  {adcMin},  {adcMax},  {adcMax},   0,   0
  tpsGauge              = tps,             "tps",                 "%",     0,         100,       -10,       -10,       110,       110,        0,   0
  ppsAGauge             = ppsA,            "ppsA",                "ADC",   {adcMin},  {adcMax},  {adcMin},  {adcMin},  {adcMax},  {adcMax},   0,   0
  ppsBGauge             = ppsB,            "ppsB",                "ADC",   {adcMin},  {adcMax},  {adcMin},  {adcMin},  {adcMax},  {adcMax},   0,   0
  ppsGauge              = pps,             "pps",                 "%",     0,         100,       -10,       -10,       110,       110,        0,   0
  motorCurrentGauge     = motorCurrent_mA, "Motor Current",       "mA",    0,         3000,      -10,       -10,       2000,      2500,       0,   0
  driverFBGauge         = driverFB,        "driverFB",            "ADC",   {adcMin},  {adcMax},  {adcMin},  {adcMin},  {adcMax},  {adcMax},   0,   0

gaugeCategory = "Calculations";
  ;Name                   Var              Title                  Units    Lo         Hi         LoD        LoW        HiW        HiD         vd   ld
  tpsTargetGauge        = tpsTarget,       "tpsTarget",           "%",     0,         100,       -10,       -10,       110,       110,        0,   0
  motorOutGauge         = motorOut,        "motorOut",            "PWM",   -255,      255,       -260,      -260,      260,       260,        0,   0
  tpsSafetyDeltaGauge   = tpsSafetyDelta,  "TPS Safety Delta",    "ADC",   -1023,     1023,      -60,       -30,       30,        60,         0,   0
  ppsSafetyDeltaGauge   = ppsSafetyDelta,  "PPS Safety Delta",    "ADC",   -1023,     1023,      -60,       -30,       30,        60,         0,   0
  idleAdderGauge        = idleAdder,       "Idle Adder",          "%",     0,         100,       -10,       -10,       110,       110,        0,   0
  ppsAdderGauge         = ppsAdder,        "PPS Adder",           "%",     0,         100,       -10,       -10,       110,       110,        0,   0

gaugeCategory = "Status";
  ;Name                    Var                  Title                       Units    Lo         Hi         LoD        LoW        HiW        HiD         vd   ld
  ppsCompFaultCountGauge = ppsCompFaultCount,   "PPS Comp Fault Count",     "",      0,         {maxU08},  -10,       -10,       10,        20,         0,   0
  tpsCompFaultCountGauge = tpsCompFaultCount,   "TPS Comp Fault Count",     "",      0,         {maxU08},  -10,       -10,       10,        20,         0,   0

gaugeCategory = "X-Code dev"; for diagnotics
  ;Name                   Var              Title                  Units    Lo     Hi         LoD        LoW        HiW        HiD         vd   ld
  canErrorCountGauge    = canErrorCount,   "CAN Error Count",     "",      0,     {maxU08},  -1,        -1,        1,         10,         0,   0
  loopTimeGauge         = loopTimeUs,      "Mainloop Time",       "us",    0,     1500,      -1,        -1,        600,       1000,       0,   0
  deadGauge             = deadValue,       "---",                 "",      0,     1,         -1,        -1,        2,         2,          0,   0
  currFlashTableGauge   = currFlashTable,  "Current Flash Table", "",      0,     15,        -1,        -1,        16,        16,         0,   0

;  - Regardless of the order shown here, the gauges are listed in the TunerStudio drop-down menu in capital/upper case
;    alphabetical order, then lower case/alphabetical order (i.e., by ASCII numbering).

;-------------------------------------------------------------------------------

[FrontPage]

   ; Gauges are numbered left to right, top to bottom.
   ;
   ;    1  2  3  4
   ;    5  6  7  8
   gauge1 = ppsGauge
   gauge2 = tpsGauge
   gauge3 = motorOutGauge
   gauge4 = motorCurrentGauge
   gauge5 = deadGauge
   gauge6 = tpsTargetGauge
   gauge7 = loopTimeGauge
   gauge8 = currFlashTableGauge

   ;----------------------------------------------------------------------------
   ; Indicators
   ;               expr                         off-label           on-label,           off-bg, off-fg, on-bg,  on-fg
   indicator     = {needsBurn},                 "Need Burn",        "Need Burn",        white,  black,  red,    black
   indicator     = {flashDataLost},             "Flash Data Lost",  "Flash Data Lost",  white,  black,  red,    black
   indicator     = {mcusr_porf},                "Power-On RST",     "Power-On RST",     white,  black,  green,  black
   indicator     = {mcusr_extrf},               "External RST",     "External RST",     white,  black,  green,  black
   indicator     = {mcusr_borf},                "Brownout RST",     "Brownout RST",     white,  black,  red,    black
   indicator     = {mcusr_wdrf},                "Watchdog RST",     "Watchdog RST",     white,  black,  reg,    black
   indicator     = {status_throttleEnabled},    "THROTTLE DISABLED","THROTTLE ENABLED", red,    black,  green,  black
   indicator     = {status_motorEnabled},       "MOTOR DISABLED",   "MOTOR ENABLED",    red,    black,  green,  black
   indicator     = {status_ppsComparisonFault}, "PPS Comp OK",      "PPS Comp FAULT",   green,  black,  red,    black
   indicator     = {status_tpsComparisonFault}, "TPS Comp OK",      "TPS Comp FAULT",   green,  black,  red,    black
   indicator     = {status_motorDriverFault},   "Driver OK",        "Driver FAULT",     green,  black,  red,    black

   ;-------------------------------------------------------------------------------

[RunTime]
;   barHysteresis = 2.5 ; Seconds

;-------------------------------------------------------------------------------

[Tuning]

;-------------------------------------------------------------------------------

[AccelerationWizard]
; not used for trans control

;-------------------------------------------------------------------------------

[BurstMode]
   getCommand       = "a\x00\x06"

[OutputChannels]
; These are from the outpc. structure in the main.c file of the source code
; the size and format are the same as above
  deadValue  = { 0 }; convenient unchanging value
  adcMin     = { 0 }; min value from Arduino ADC
  adcMax     = { 1023 }; max value from Arduino ADC
  minU08     = { 0 }; min value of a 8bit unsigned integer
  maxU08     = { 255 }; max value of a 8bit unsigned integer
  minU16     = { 0 }; min value of a 16bit unsigned integer
  maxU16     = { 65535 }; max value of a 16bit unsigned integer
  minS16     = { -32768 }; min value of a 16bit signed integer
  maxS16     = { 32767 }; max value of a 16bit signed integer
  minRT_Id   = { 0 }; min real-time data broadcast Id
  maxRT_Id   = { 2047 }; max real-time data broadcast Id
  seconds    = { 0 }; FIXME should provide from MCU. needed by TunerStudio's "PowerCycle Monitor"

  ochBlockSize     = 128 ; change this if adding extra data to outpc
#if CAN_COMMANDS
;full version that works anywhere
   ochGetCommand    = "r\$tsCanId\x00%2o%2c"; read from table 0
#else
; fast get via serial
   ochGetCommand       = "A"
#endif

  ; ************************************************************* outpc ********************************************************************
  ;name                      = class,  type, offset,         shape,    units,       scale,      translate
  canStatus                  = bits,   U08,  0,              [0:7]     "",          1,          0           ; status register for CAN interface
  canStatus_rxOverFlow       = bits,   U08,  0,              [0:0]                                          ; 1 if CAN Rx FIFO overflowed
  canStatus_txFailed         = bits,   U08,  0,              [1:1]                                          ; 1 if CAN Tx failed
  canErrorCount              = scalar, U08,  1,                        "",          1,          0           ; number of CAN errors
  loopTimeUs                 = scalar, U16,  2,                        "us",        1,          0           ; main loop's execution time
  status0                    = scalar, U08,  4,                        "bits",      1,          0           ; status register 0
  needsBurn                  = bits,   U08,  4,              [0:0]                                          ; 1 if needs a flash page burned
  flashDataLost              = bits,   U08,  4,              [1:1]                                          ; 1 if unburned flash page was swapped out
  currFlashTable             = bits,   U08,  4,              [4:7]                                          ; current flash table loaded into RAM
  mcusr                      = scalar, U08,  5,                        "bits",      1,          0           ; AVR's MCUSR register contents
  mcusr_porf                 = bits,   U08,  5,              [0:0]                                          ; power-on reset flag
  mcusr_extrf                = bits,   U08,  5,              [1:1]                                          ; extern reset flag
  mcusr_borf                 = bits,   U08,  5,              [2:2]                                          ; brown-out reset flag
  mcusr_wdrf                 = bits,   U08,  5,              [3:3]                                          ; watchdog reset flag

  ; throttle out vars
  tpsA                       = scalar, U16,  10,                       "ADC",       1,          0           ; tpsA ADC value (raw)
  tpsB                       = scalar, U16,  12,                       "ADC",       1,          0           ; tpsB ADC value (raw)
  tps                        = scalar, S16,  14,                       "%",         0.01,       0           ; tps percent
  ppsA                       = scalar, U16,  16,                       "ADC",       1,          0           ; ppsA ADC value (raw)
  ppsB                       = scalar, U16,  18,                       "ADC",       1,          0           ; ppsB ADC value (raw)
  pps                        = scalar, S16,  20,                       "%",         0.01,       0           ; pps percent
  tpsTarget                  = scalar, S16,  22,                       "%",         0.01,       0           ; PID's target tps value
  motorOut                   = scalar, S16,  24,                       "PWM",       1,          0           ; motor driver PWM output + dir
  motorCurrent_mA            = scalar, U16,  26,                       "mA",        1,          0           ; motor current
  status                     = bits,   U08,  28,             [0:7]     "",          1,          0           ; status register for throttle PID
  status_pidAutoTuneBusy     = bits,   U08,  28,             [0:0]                                          ; 1 if autotune is inprogress, 0 otherwise
  status_ppsComparisonFault  = bits,   U08,  28,             [1:1]                                          ;
  status_tpsComparisonFault  = bits,   U08,  28,             [2:2]                                          ;
  status_throttleEnabled     = bits,   U08,  28,             [3:3]                                          ;
  status_motorEnabled        = bits,   U08,  28,             [4:4]                                          ;
  status_motorDriverFault    = bits,   U08,  28,             [5:5]                                          ; 1 if motor driver detected overcurrent or over temp condition, 0 otherwise
  status_reserved1           = bits,   U08,  28,             [6:7]                                          ;
  ppsSafetyDelta             = scalar, S16,  29,                       "ADC",       1,          0           ; delta in the redundant PPS sensor comparison
  tpsSafetyDelta             = scalar, S16,  31,                       "ADC",       1,          0           ; delta in the redundant TPS sensor comparison
  idleAdder                  = scalar, S16,  33,                       "%",         0.01,       0           ; portion of tps target from idle control
  ppsAdder                   = scalar, S16,  35,                       "%",         0.01,       0           ; portion of tps target from pedal position
  driverFB                   = scalar, U16,  37,                       "ADC",       1,          0           ; motor driver current feedback ADC value (raw)
  ppsCompFaultCount          = scalar, U08,  39,                       "",          1,          0           ; PPS comparison fault counter (wraps)
  tpsCompFaultCount          = scalar, U08,  40,                       "",          1,          0           ; TPS comparison fault counter (wraps)

;-------------------------------------------------------------------------------
;--  The entries are saved in the datalog file in the order in which they     --
;--  appear in the list below.                                                --
;--                                                                           --
;--   Channel - Case sensitive name of output channel to be logged.           --
;--   Label   - String written to header line of log.                         --
;--   Type    - Data type of output, converted before writing.                --
;--   Format  - C-style output format of data.                                --

[Datalog]
   ;       Channel            Label          Type    Format
   ;       --------------     ----------     -----   ------
   entry = tps,               "TPS",         float,  "%.2f"
   entry = tpsA,              "TPSA",        int,    "%d"
   entry = tpsB,              "TPSB",        int,    "%d"
   entry = pps,               "PPS",         float,  "%.2f"
   entry = ppsA,              "PPSA",        int,    "%d"
   entry = ppsB,              "PPSB",        int,    "%d"
   entry = tpsTarget,         "TPS Target",  float,  "%.2f"
   entry = motorOut,          "Motor Out",   int,    "%d"
   entry = idleAdder,         "Idle Adder",  float,  "%.2f"
   entry = ppsAdder,          "PPS Adder",   float,  "%.2f"
